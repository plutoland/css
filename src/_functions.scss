//
// Functions
//

// Make a map of responsive variants, given a map of breakpoints and a separator
@function make-responsive-variants($breakpoints, $separator) {
  $responsive-variants: (
    '': '',
  );
  @each $breakpoint in map-keys($breakpoints) {
    $responsive-variants: map-merge(
      $responsive-variants,
      (
        $breakpoint: $breakpoint + $separator,
      )
    );
  }
  @return $responsive-variants;
}

// Turn a map into its negative variant, with an optional key prefix
@function negativify-map($map, $prefix: '') {
  $result: ();
  @each $key, $value in $map {
    @if $key != 0 {
      $result: map-merge($result, ($prefix + $key: (-$value)));
    }
  }
  @return $result;
}

// Get multiple keys from a map
@function map-get-multiple($map, $values) {
  $result: ();
  @each $key, $value in $map {
    @if (index($values, $key) != null) {
      $result: map-merge(
        $result,
        (
          $key: $value,
        )
      );
    }
  }
  @return $result;
}

// String replace
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }
  @return $string;
}

// SVG to data URI
@function svg-to-data-uri($svg, $fill: null) {
  @if $fill {
    $svg: str-replace($svg, 'fill=""', 'fill="#{$fill}"');
  }
  @if not str-index($svg, xmlns) {
    $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
  }
  $svg: str-replace($svg, '"', "'");
  $svg: str-replace($svg, '<', '%3C');
  $svg: str-replace($svg, '>', '%3E');
  $svg: str-replace($svg, '#', '%23');
  @return url('data:image/svg+xml,#{$svg}');
}
